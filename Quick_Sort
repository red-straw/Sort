#include <stdio.h>

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high]; // 피벗을 배열의 마지막 요소로 선택
    int i = (low - 1);     // 작은 요소들의 끝 인덱스

    for (int j = low; j <= high - 1; j++) {
        // 현재 요소가 피벗보다 작으면 교환
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        // 파티션을 통해 분할
        int pi = partition(arr, low, high);

        // 분할된 부분 배열을 정렬
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    int arr[] = {2, 4, 1, 5, 3};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("정렬 전 배열: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    quickSort(arr, 0, n - 1);

    printf("퀵 정렬 후 배열: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}

퀵정렬은 분할 정복 알고리즘으로 큰문제를 작은 문제로 나누어 해결하는 방법이다.
배열에서 어떤값을 기준점 피벗으로 잡고 작은 값들을 오른쪽으로, 큰값은 왼쪽으로 옮긴다.
반복하다보면 최종적으로 피벗은 정렬된 위치로 오게된다.


퀵정렬은 다른 일반덕인 알고리즘들보다 빠르고 배열이 클수록 그 빛을 발한다.
추가적인 메모리를 사용하지 않고 배열 내에서 원소들을 교환하는 방식으로 동작하므로 메모리 효율성이 좋다.

단점으로는 기본적으로 불안정한 알고리즘으로 동일한 키 값에 대해 순서가 보장되지 않을 수 있다.
또한 이미 정렬된 배열이나 거의 정렬된 배열에 대해서는 성능이 좋지 않을 수 있다.
부적절한 피벗선택은 성능을 저하시킬 수 있다.
추가적인 메모리를 사용하지 않는 장점이 있지만, 이는 정렬된 데이터셋에 대해 교환연산을 발생하게 해서 성능을 악화시킬 수 있다.
